// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source=app.go -destination=mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrometheusClient is a mock of PrometheusClient interface.
type MockPrometheusClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusClientMockRecorder
	isgomock struct{}
}

// MockPrometheusClientMockRecorder is the mock recorder for MockPrometheusClient.
type MockPrometheusClientMockRecorder struct {
	mock *MockPrometheusClient
}

// NewMockPrometheusClient creates a new mock instance.
func NewMockPrometheusClient(ctrl *gomock.Controller) *MockPrometheusClient {
	mock := &MockPrometheusClient{ctrl: ctrl}
	mock.recorder = &MockPrometheusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusClient) EXPECT() *MockPrometheusClientMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockPrometheusClient) Inc(label1, label2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc", label1, label2)
}

// Inc indicates an expected call of Inc.
func (mr *MockPrometheusClientMockRecorder) Inc(label1, label2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockPrometheusClient)(nil).Inc), label1, label2)
}
